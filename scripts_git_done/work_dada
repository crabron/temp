mult <- TRUE # TRUE
mlt <- NULL # NULL
path <- "/home/gladkov/storage/al_R/new2/"
path_trein_set <- "/home/gladkov/storage/raw_fires/new2_dada/silva_nr_v132_train_set.fa"
path_trein_set_species <- "/home/gladkov/storage/raw_fires/new2_dada/silva_species_assignment_v132.fa"
map_path <-"al_map_with_elements_true_wQ.csv.tsv"
#name_Brief <- "Al_new2.tsv"
map_column_with_IDs <- "ID"

library(dada2)
library(Biostrings)
library(DECIPHER)
library(phyloseq)
library(seqinr)
library(data.table)
library(metagMisc)
library(ampvis2)
library(tibble)


fnFs <- sort(list.files(path, pattern="_R1_001.fastq", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="_R2_001.fastq", full.names = TRUE))
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
on.exit()
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"))
filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))

out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, truncLen=c(220,180), trimLeft=20, maxN=0, maxEE=c(2,5), rm.phix=TRUE, compress=TRUE, multithread=mult)
errF <- learnErrors(filtFs, multithread=mult)
errR <- learnErrors(filtRs, multithread=mult)
derepFs <- derepFastq(filtFs, verbose=TRUE)
derepRs <- derepFastq(filtRs, verbose=TRUE)
# Name the derep-class objects by the sample names
names(derepFs) <- sample.names
names(derepRs) <- sample.names
dadaFs <- dada(derepFs, err=errF, multithread=mult, pool=TRUE)
dadaRs <- dada(derepRs, err=errR, multithread=mult, pool=TRUE)
mergers <- mergePairs(dadaFs, derepFs, dadaRs, derepRs, verbose=TRUE)
seqtab <- makeSequenceTable(mergers)
dim(seqtab)
table(nchar(getSequences(seqtab)))
getN <- function(x) sum(getUniques(x))
seqtab.nochim <- removeBimeraDenovo(seqtab, method="consensus", multithread=mult, verbose=TRUE)


briefToSeq <- colnames(seqtab.nochim)
names(briefToSeq) <- paste0("Seq", seq(ncol(seqtab.nochim))) 
st.brief <- seqtab.nochim
colnames(st.brief) <- names(briefToSeq) 

write.table(briefToSeq, file = name_Brief, sep = "\t")

#dna <- DNAStringSet(briefToSeq)
#alignment <- AlignSeqs(DNAStringSet(dna), anchor=NA,verbose=FALSE, processors = mlt)
#writeXStringSet(alignment, file="align.fasta")

taxa.dada2 <- assignTaxonomy(briefToSeq,path_trein_set , multithread=mult)
taxa.dada2.species <- assignSpecies(briefToSeq, path_trein_set_species) # maybe use not seqs but brief 
rownames(taxa.dada2.species) <- rownames(briefToSeq)
briefToSeq.df <- data.frame(briefToSeq)
rownames(taxa.dada2.species) <- rownames(briefToSeq.df)
rownames(taxa.dada2) <- rownames(taxa.dada2.species)
taxa <- cbind2(taxa.dada2, taxa.dada2.species[,2])
colnames(taxa)[7] <- "Species"

st.brief.t.df <- data.frame(t(st.brief))
write.table(st.brief.t.df, file = "otu_table.txt", sep= "\t", col.names = NA, quote=FALSE)

briefToSeq.ls <- as.list(briefToSeq.df[,c("briefToSeq")])
briefToSeq.names <- as.list(rownames(briefToSeq.df))
write.fasta( briefToSeq.ls, briefToSeq.names , "rep_seq.fasta", as.string = FALSE)

conda activate qiime2-2019.1

sed -i '1s/^/#OTU_ID/' otu_table.txt 
biom convert -i otu_table.txt -o otu_table.biom --to-hdf5

qiime tools import \
  --input-path rep_seq.fasta \
  --output-path rep_seq.qza \
  --type 'FeatureData[Sequence]'

qiime fragment-insertion sepp --i-representative-sequences rep_seq.qza  --o-tree insertion-tree.qza  --o-placements insertion-placements.qza --p-threads 20

qiime tools import \
  --input-path otu_table.biom \
  --type 'FeatureTable[Frequency]' \
  --input-format BIOMV210Format \
  --output-path feature-table.qza

qiime fragment-insertion filter-features \
  --i-table feature-table.qza \
  --i-tree insertion-tree.qza \
  --o-filtered-table filtered_table.qza \
  --o-removed-table removed_table.qza

unzip -p filtered_table.qza */data/* > filtered_table.biom
biom convert -i  filtered_table.biom -o filtered_table.txt --to-tsv
sed -i '1d' filtered_table.txt
unzip -p insertion-tree.qza */data/* > tree.nwk


filt.otu <-t(as.data.frame(fread("filtered_table.txt")))
first <-  filt.otu[1,]
filt.otu <- filt.otu[-c(1),]
colnames(filt.otu) <-  first
class(filt.otu) <- "numeric"
filt.otu.matrix <- as.matrix(filt.otu)
#head.col <- scan("head.txt", character(), quote = "")
#rownames(filt.otu.matrix) <- head.col
tree <- read_tree(treefile="tree.nwk")


mapp <- read.csv(map_path , header=TRUE, sep="\t")
map <- data.frame(row.names="ID", mapp)

ps <- phyloseq(otu_table(filt.otu.matrix, taxa_are_rows=FALSE), 
               sample_data(map), 
               tax_table(taxa),
               phy_tree(tree))
               
               
               
ordination.u <- ordinate(ps.f,"PCoA", "unifrac")
ordination.w <- ordinate(ps.f,"PCoA", "wunifrac")
p = plot_ordination(ps.f, ordination.u, type="sample", color="Type", shape="Soil", title="PCoA - Unweighed Unifrac", axes = c(1,2) ) + theme_bw() + theme(text = element_text(size = 14)) + geom_point(size = 3) 
p1 <- p + stat_ellipse( type="norm", alpha=0.7)

p = plot_ordination(ps.f, ordination.w, type="sample", color="Type", shape="Soil", title="PCoA - Weighed Unifrac", axes = c(1,2) ) + theme_bw() + theme(text = element_text(size = 14)) + geom_point(size = 3) 
p2 <- p + stat_ellipse( type="norm", alpha=0.7)

p = plot_ordination(ps.f, ordination.u, type="sample", color="Type", shape="Soil", title="PCoA - Unweighed Unifrac", axes = c(1,3) ) + theme_bw() + theme(text = element_text(size = 14)) + geom_point(size = 3) 
p3 <- p + stat_ellipse( type="norm", alpha=0.7)

p = plot_ordination(ps.f, ordination.w, type="sample", color="Type", shape="Soil", title="PCoA - Weighed Unifrac", axes = c(1,3) ) + theme_bw() + theme(text = element_text(size = 14)) + geom_point(size = 3) 
p4 <- p + stat_ellipse( type="norm", alpha=0.7)

ggarrange(p1, p2, p3, p4, ncol = 2 , nrow = 2)

mapp <- read.csv("map.plates.new.csv" , header=TRUE, sep=",")
map <- data.frame(row.names="ID", mapp)
sample_data(ps.f) <- map

unzip -p removed_table.qza */data/* > removed_table.biom
biom convert -i  removed_table.biom -o removed_table.txt --to-tsv


s1 <- prune_samples(sample_data(ps.all.w.clean)$Site %in% c("siteI"), ps.all.w.clean)
pod.cDNA.Dna.ps <- prune_taxa(taxa_sums(pod.cDNA.Dna.ps) > 0, pod.cDNA.Dna.ps)


library(phyloseq)
library(tibble)
library(dplyr)
library(microbiomeSeq)


col.mat <- rownames(as.data.frame(ps.all.w.clean@otu_table@.Data))

s1 <- prune_samples(sample_data(ps.all.w.clean)$Site %in% c("siteI"), ps.all.w.clean)
s2 <- prune_samples(sample_data(ps.all.w.clean)$Site %in% c("siteII"), ps.all.w.clean)
s3 <- prune_samples(sample_data(ps.all.w.clean)$Site %in% c("siteIII"), ps.all.w.clean)
s4 <- prune_samples(sample_data(ps.all.w.clean)$Site %in% c("siteIV"), ps.all.w.clean)
s5 <- prune_samples(sample_data(ps.all.w.clean)$Site %in% c("siteV"), ps.all.w.clean)

s1 <- prune_taxa(taxa_sums(s1) > 5, s1)
s2 <- prune_taxa(taxa_sums(s2) > 5, s2)
s3 <- prune_taxa(taxa_sums(s3) > 5, s3)
s4 <- prune_taxa(taxa_sums(s4) > 5, s4)
s5 <- prune_taxa(taxa_sums(s5) > 5, s5)

mat.merged <- full_join(as.data.frame(s1@otu_table@.Data),as.data.frame(s2@otu_table@.Data), name=TRUE)
mat.merged <- full_join(mat.merged,as.data.frame(s3@otu_table@.Data), name=TRUE)
mat.merged <- full_join(mat.merged,as.data.frame(s4@otu_table@.Data), name=TRUE)
mat.merged <- full_join(mat.merged,as.data.frame(s5@otu_table@.Data), name=TRUE)

rownames(mat.merged) <- col.mat
mat.merged.wna <- t(na.omit(t(mat.merged)))
ps.lise.out <- phyloseq(otu_table(as.matrix(mat.merged.wna), taxa_are_rows=FALSE), sample_data(ps.all.w.clean@sam_data), tax_table(ps.all.w.clean@tax_table@.Data)) 
ps.lise.out <- normalise_data(ps.lise.out, norm.method = "proportion")
amp.lise.out <- merge_samples(ps.lise.out, "Repeats", fun=median)
lise.out <- cbind2(as.data.frame(t(amp.lise.out@otu_table@.Data)), as.data.frame(tax_table(ps.lise.out@tax_table@.Data)))
write.table(lise.out, file = "lise.out.csv", sep= "\t", col.names = NA, quote=FALSE)

library(tibble)
merged.pod.cDNA.dews.sim <- merge(des.pod.cDNA, pod.sim.cDNA.df, by = 0, all = T)
merged.pod.cDNA.dews.sim <- column_to_rownames( merged.pod.cDNA.dews.sim, "Row.names")




